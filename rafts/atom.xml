<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Flavours of a Nerd</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-04-21T18:38:17+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Yeshwanth</name>
   <email>1992chinna@gmail.com</email>
 </author>

 
 <entry>
   <title>XOR using MultiLayered Perceptron</title>
   <link href="http://localhost:4000/posts/2016/10/my-experiments-with-XOR-Copy.html"/>
   <updated>2016-10-28T13:48:42+05:30</updated>
   <id>http://localhost:4000/posts/2016/10/my-experiments-with-XOR - Copy</id>
   <content type="html">&lt;p&gt;Historically, almost every non-tree based ML algorithm created only linear separable spaces, and the XOR simply cannot be modeled with them. Enter &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/lecture/solUx/examples-and-intuitions-ii&quot;&gt;the multilayerd perceptron&lt;/a&gt; (MLP) and everything changed. With an elegant chaining of linear combinations of inputs we can obtain almost any number of linear decision boundaries. So I thought I’d bulid a robust XOR gate using a simple MLP
&lt;!--more--&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;x&lt;sub&gt;1&lt;/sub&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;caption&quot;&gt;Truth table of XOR &lt;/div&gt;

&lt;p&gt;The goal was to create a network which can learn these four points with as minimal setup as possible. And that would be one with one layer each for input, hidden and output nodes where the hidden layer has 2 neurons only.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/nn architecture.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Simple MLP! &lt;/div&gt;

&lt;p&gt;To fit four points using a neural network is simple. Right?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/zero loss on simple nn.bmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Loss on an XOR data. Done and dusted! &lt;/div&gt;

&lt;p&gt;It turns out, no. While it did classify correctly most of the times, there were instances when the network simply wouldn’t converge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/loss on simple nn.bmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Why you no converge to zero? &lt;/div&gt;

&lt;p&gt;Why can’t it fit four points? Is Andrew Ng wrong when he &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/lecture/solUx/examples-and-intuitions-ii&quot;&gt;claimed&lt;/a&gt; that a simple MLP can predict XOR? The answer: It depends on the way the weights are initialized. This will dictate, at which local minimum is the network going to converge.&lt;/p&gt;

&lt;p&gt;To dig deeper into this I created a 3D graph of y vs (x&lt;sub&gt;1&lt;/sub&gt;,x&lt;sub&gt;2&lt;/sub&gt;) where z-axis is y, the output of our simple MLP. And depending on the weights the MLP will have a different linear separators and heights for each plateau.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/input output of a simple mlp.bmp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;There are four plateaus for a simple MLP&lt;/div&gt;

&lt;p&gt;The interesting observation is that a pair of plateaus on the opposite corners necessarily have highest and lowest z value. And this actually means a simple MLP can &lt;strong&gt;never&lt;/strong&gt; fit an XOR gate since the ideal gate should have the opposite quadrants on same heights. This got me confused. Where does Andrew Ng’s claim fit into the picture? The answer is, the weights were built to fit the data. And this needn’t happen with random initializations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/special weights.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Notice how (0,1) and (1,0) are in the valley while (0,0) and (1,1) are on the plateaus&lt;/div&gt;

&lt;p&gt;This made me rethink my model. XOR is not about fitting four points, but working with the entire cartesian plane.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;x&lt;sub&gt;1&lt;/sub&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;negative&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;negative&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;positive&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;negative&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;negative&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;positive&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;positive&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;positive&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;caption&quot;&gt;Modified XOR&lt;/div&gt;

&lt;p&gt;And this way, I generated thousands of pairs of real numbers (x&lt;sub&gt;1&lt;/sub&gt;, x&lt;sub&gt;2&lt;/sub&gt;) each between -10 and 10 and their corresponding y values. Almost every training instance gave only 85% accuracy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xor/ideal vs computed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Ideal XOR vs Computed. &lt;br /&gt;The red circles on the right show the errors which a simple 2 node MLP cannot calculate.&lt;/div&gt;

&lt;p&gt;This once again shows that a simple MLP &lt;strong&gt;cannot&lt;/strong&gt; fit XOR data. The workaround is to increase the number of nodes in the hidden layer, and this in turn creates multiple plateaus which will only fit the data and not generalize&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Barebones Git</title>
   <link href="http://localhost:4000/posts/2016/07/barebones-git.html"/>
   <updated>2016-07-11T18:43:38+05:30</updated>
   <id>http://localhost:4000/posts/2016/07/barebones-git</id>
   <content type="html">&lt;p&gt;Many people I know confuse Git with Github, and probably don’t have a good idea of what version control is. I guess, half the trouble with lies in the steep learning curve, not to mention how new and bizzare some concepts are. I’ve had my own million doubts before using Git and never knew where to start. Even if I did start, I’d have had given up on the second day not understanding why certain thing is the way it is.&lt;br /&gt;
This post is just for that, to de-mistify what a good tool Git is and how easy it is to integrate into the workflow and, really, master version controlling with only a handful of commands. I hope the days of copy-pasting a file in the name of ‘backup’ are a days of the past.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;firstly&quot;&gt;Firstly…&lt;/h2&gt;
&lt;p&gt;Git is a version control software, created by &lt;a href=&quot;https://www.linux.com/blog/10-years-git-interview-git-creator-linus-torvalds&quot;&gt;Linus Torvalds&lt;/a&gt;, the founder of Linux. &lt;a href=&quot;github.com&quot;&gt;Github&lt;/a&gt;, on the other hand is a neat platform to share and store code along with all the goodness of git. Github, is by default, a free platform at the cost of hosting the contents visible to the public. There’s a subscription service to have propitiatory projects stored online in all secrecy. Even though Git can seamlessly integrate with Github, it is however, also compatible with other code sharing platforms or just any location for that matter (ftps and shared networks, included)&lt;/p&gt;

&lt;h2 id=&quot;secondly&quot;&gt;Secondly…&lt;/h2&gt;
&lt;p&gt;It’s all about practice. Let’s dedicate this section to create a setup, to restore backups, without copy-pasting a single file.&lt;/p&gt;

&lt;h3 id=&quot;lets-start-setting-up-in-an-empty-folder-ill-name-it-gittut&quot;&gt;Let’s start setting up in an empty folder (I’ll name it gittut)&lt;/h3&gt;

&lt;p&gt;The magic starts with initializing a Git repository&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\&amp;gt;mkdir gittut

C:\...\&amp;gt;cd gittut

C:\...\gittut&amp;gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It means that the folder is ready for some version control action! The only visible difference would be that there is be .git folder created in the directory which is hidden by default. The takeaway point is that any location containing a .git folder means one or more (generally all) files have versions which Git is handling. Let’s create a text file named ‘my.txt’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;more my.txt
First line, nothing more!!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gittut/initialized_folder.jpg&quot; alt=&quot;on my waaaay!&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;the current folder would look like this...&lt;/div&gt;

&lt;p&gt;Git still wouldn’t know that something new has been added. Technically, it hasn’t started &lt;em&gt;tracking&lt;/em&gt; any files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        my.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git status gives, well, the current status of the folder.&lt;/p&gt;

&lt;h3 id=&quot;the-way-to-start-tracking-a-file-is&quot;&gt;The way to start tracking a file is&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git add my.txt

C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   my.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To add all the files in a folder, one would &lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-see-what-happens-after-editing-the-text-file&quot;&gt;Let’s see what happens after editing the text file…&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;more my.txt
First line, nothing more!! :3

Second line... ADDED!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There was a modification in the first line ‘:3’ and a second line was added.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   my.txt

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        modified:   my.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git notifies the modification that happend with respect to the state when a file was added. This is because, the moment we &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; a file (to what is called as a stage), it freezes the state of the file for a possible commit. And any modifications after &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; -ing a file will not be committed in the future. &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; functions as a soft commit where if a code goes awry after modification, one could always go back to the state when it was &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; -ed. &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout my.txt&lt;/code&gt; would essentially revert back the text file to the state when it was added for staging.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git checkout my.txt

C:\...\gittut&amp;gt;more my.txt
First line, nothing more!!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this way, it is always possible to revert a dysfunctional code back to a working state (given you &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; the file to stage everytime a code works just fine). There’s your backup isn’t it!?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Of course! We’ve just scratched the surface of the shell. We barely tickled the tentacles and hardly glanced at the ginormous gizmo, which is Git. There’s more to git than simple &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; command.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Baby Steps</title>
   <link href="http://localhost:4000/posts/2016/07/welcome-to-jekyll.html"/>
   <updated>2016-07-08T20:35:38+05:30</updated>
   <id>http://localhost:4000/posts/2016/07/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;It’s been ages since I wanted to get hold of a blog. Not blogpost or Wordpress or any of those things. I wanted something under my own control. I’ve found it! This is it! No crappy ads or loss of control. I can make the blog however shitty/sparkly I want, without anyone’s permission. Thanks internet! &lt;a href=&quot;https://www.youtube.com/watch?v=ZZ5LpwO-An4&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#2muchOptimism&lt;/code&gt;&lt;/a&gt;
&lt;!--more--&gt;
So here’s a bird’s eye view on &lt;a href=&quot;https://www.youtube.com/watch?v=EtqZVTIro_c&quot;&gt;how it’s done&lt;/a&gt;. That is, to setup a barebones structure for a website and have it running on a local server. Github is a great place to host the blog (it’s free!) and show the world what you know (what do you know, really?). Well, there are important things to nail, now that the foundation has been laid. Markdown, more jekyll, more themes and more, you know, writing. I guess this will be a good start. Maybe, the next post would be an actual tutorial (instead of the just a youtube link) to get a blog running on github, barebones style.&lt;/p&gt;

&lt;p&gt;This will be it for the blog post! I’ll just leave the default text hanging around.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sailor-Wheel</title>
   <link href="http://localhost:4000/project/2015/12/sailor-wheel.html"/>
   <updated>2015-12-12T00:00:00+05:30</updated>
   <id>http://localhost:4000/project/2015/12/sailor-wheel</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://sizhky.github.io/Wheel-Puzzle&quot;&gt;Sailor-Wheel&lt;/a&gt; puzzle is a js based game that my friend and I have done in a week, as a way to build momentum in building more games together.&lt;br /&gt;
The concept is pretty self explanatory - Spokes around a wheel need to be ‘pulled’ out by point and click. The catch being a network of internal connections that push and pull spokes when any single spoke’s state is modified. The player needs to figure out these cause-effect rules and manage to pull out all the spokes.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/assets/project/sailor-wheel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;Home Page&lt;/div&gt;

&lt;p&gt;The rules are generated randomly at every level and keeps the game dynamic and repeater friendly. However the main bug is to be that the rules, being absolutely random, can generate impossible levels to solve and that pretty much ruins the streak.
That said I am figuring out the mathematics underneath the impossibility of a level and make sure the code only generates those that can be solved. You are free to download the source-code and play with it yourself - the entire game is a single .html file.&lt;/p&gt;

</content>
 </entry>
 

</feed>
